import React, { Component } from 'react';
import {
    Page,
    Navbar,
    NavRight,
    NavTitle,
    Link,
    List,
    ListItem,
    SwipeoutActions,
    SwipeoutButton,
    ListInput,
} from 'framework7-react';
import $ from 'jquery';
import $$ from 'dom7';
import ILApi from './ILApi'

// --------------------------------------------------------------------------------------
// ClassName
// --------------------------------------------------------------------------------------
const stockClass     = 'stock';
const separatorClass = 'separator';
const taskListClass  = 'task-list';
const taskClass      = 'task';
const taskInputClass = 'task-input';

// --------------------------------------------------------------------------------------
// Selector
// --------------------------------------------------------------------------------------
const taskListSelector  = `.${taskListClass} li`;
const taskSelector      = `li.${taskClass}`;
const taskInputSelector = `.${taskInputClass} input`

// --------------------------------------------------------------------------------------
// Other
// --------------------------------------------------------------------------------------
const separator = '----------';

export default class ILList extends Component {
  constructor(props) {
    console.log("run constructor!");
    super(props);

    this.state = {
      vlData: { items: [] }
    }
  }

  renderExternal(vl, vlData) {
    console.log('run renderExternal!');
    console.log(vlData);
    this.setState({ vlData });
  }

  componentDidMount = () => {
    console.log("componentDidMount!");
    this.fetchAllItem();

    $$(taskInputSelector).on('keydown', (e) => {
      if (e.keyCode === 13 && e.target.value != '') {
        const item = { id: null, task: e.target.value };
        this.addItem(item);
        e.target.value = '';
        e.target.blur();
      }
    })
  }
  componentDidUpdate = () => {
    console.log("componentDidUpdate!");

    $$(taskSelector).on('click', (e) => {
      this.handleClickList(e);
    })
  }

  handleClickList = (e) => {
    console.log("handleClickList!");
    const li = $(e.currentTarget);
    const sep = $(`.${separatorClass}`)[0];

    if(li.hasClass(stockClass)) {
      return;
    } else {
      // このshow('fast')がdom7だとできなさそうなので、
      // ここだけjquery使用
      li.insertAfter(sep).hide().show('fast');
      li.addClass(stockClass);
    }
  }

  handleMoveList = (e,indexes) => {
    console.log('handleMoveList!');

    let item = null;
    let promise = (new ILApi()).moveItem(item, indexes.from, indexes.to);
    promise.then((result) => {
      let newItems = this.getVirtualList().items;
      newItems.unshift(item)
    })

    let stockFlag = false
    $$(taskListSelector).each((index,ele) => {
      if($$(ele).hasClass(separatorClass)) {
        stockFlag = true
      } else {
        if(stockFlag) {
          $$(ele).addClass(stockClass);
        } else {
          $$(ele).removeClass(stockClass);
        }
      }
    })
  }

  handleArchiveList = (e) => {
    console.log("handleArchiveList!");
    // 親要素へのイベント伝播をキャンセルする
    e.stopPropagation();
  }

  renderItem = (item) => {
    if (item.id === 0 ) {
      return (
        <ListItem key={item.id} className={separatorClass} title={item.task} />
      );
    } else {
      return (
        <ListItem key={item.id} className={taskClass} title={item.task} swipeout>
          <SwipeoutActions left>
            <SwipeoutButton delete onClick={this.handleArchiveList}>Archive</SwipeoutButton>
          </SwipeoutActions>
        </ListItem>
      );
    }
  }

  getVirtualList = () => {
    return $$(".virtual-list")[0].f7VirtualList
  }
  
  fetchAllItem = () => {
    console.log('run fetchAllItem!');

    let promise = (new ILApi()).fetchAllItem();
    promise.then((result) => {
      // -----------------------------------
      // TODO:resultからのitems取得処理を入れる
      // -----------------------------------

      // mock data
      const items = [
        {id:1, task: "task1" },
        {id:2, task: "task2" },
        {id:0, task: "-----" },
      ]
      let newItems = this.getVirtualList().items;
      items.map((item,index) => {
        newItems.push(item)
      })
      this.setState({
        vlData: { items: newItems }
      })
    })
  }

  addItem = (item) => {
    console.log('run addItem!');

    let promise = (new ILApi()).addItem(item);
    promise.then((result) => {
      // mock data
      item.id = 999;
      console.log(this.getVirtualList().items);
      this.getVirtualList().appendItem(item)
    })
  }

  deleteItem = () => {
  }

  moveItem = () => {
  }

  archiveItem = () => {
  }

  render() {
    console.log("render!");
    return(
      <Page>
        <Navbar>
          <NavRight>
            <Link iconF7="check_round" href="/ILArchive"></Link>
          </NavRight>
          <NavTitle>Ivy Lee List</NavTitle>
        </Navbar>

        <List>
          <ListInput 
            className={taskInputClass}
            type="text" 
            placeholder="タスクを入力..." 
            clearButton />
        </List>

        <List 
          className={taskListClass} 
          sortable 
          sortableEnabled 
          onSortableSort={this.handleMoveList}
          virtualList
          virtualListParams={{
            items: [],
            renderExternal: this.renderExternal.bind(this)
          }}
        >
          {
            this.state.vlData.items.map((item, index)=>{
              return this.renderItem(item);
            })
          }
        </List>
      </Page>
    );
  }
}
